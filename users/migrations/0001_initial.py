# Generated by Django 5.0.2 on 2025-06-08 05:29

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('course_type', models.CharField(choices=[('OPEN_WATER', 'Open Water Diver'), ('ADVANCED_OPEN_WATER', 'Advanced Open Water'), ('RESCUE_DIVER', 'Rescue Diver'), ('DIVEMASTER', 'Divemaster'), ('NITROX', 'Especialidad Nitrox'), ('DEEP', 'Specialty Buceo Profundo'), ('WRECK', 'Especialidad en Pecios'), ('NIGHT', 'Especialidad en Buceo Nocturno'), ('NAVIGATION', 'Especialidad en Navegación Subacuática'), ('PHOTOGRAPHY', 'Especialidad en Fotografía Subacuática'), ('SINGLE_DIVE', 'Inmersión Simple'), ('DOUBLE_DIVE', 'Inmersión Doble'), ('TRY_DIVE', 'Bautizo de Buceo'), ('SCUBA_DIVER', 'Curso Scuba Diver'), ('DIVING_LESSON', 'Clase de Buceo'), ('REFRESH', 'Curso de Refresco'), ('CUSTOM', 'Curso Personalizado')], default='CUSTOM', max_length=30)),
                ('description', models.TextField(blank=True)),
                ('total_dives', models.IntegerField(default=1, help_text='Número total de inmersiones en este curso')),
                ('duration_days', models.IntegerField(default=1, help_text='Duración estimada en días')),
                ('price', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('prerequisites', models.TextField(blank=True, help_text='Certificaciones o requisitos previos necesarios')),
                ('is_active', models.BooleanField(default=True)),
                ('just_one_dive', models.BooleanField(default=False, help_text='Marcar si esta actividad o curso es solo para una inmersión')),
                ('includes_material', models.BooleanField(default=True, help_text='El material está incluido en el precio del curso')),
                ('includes_instructor', models.BooleanField(default=True, help_text='El instructor está incluido en el precio del curso')),
                ('includes_insurance', models.BooleanField(default=True, help_text='El seguro está incluido en el precio del curso')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('diving_center', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254)),
                ('phone_number', models.CharField(max_length=20)),
                ('country', models.CharField(choices=[('ES', 'España'), ('FR', 'Francia'), ('PT', 'Portugal'), ('IT', 'Italia'), ('GB', 'Reino Unido'), ('BE', 'Bélgica'), ('NL', 'Países Bajos'), ('CH', 'Suiza'), ('DE', 'Alemania'), ('AT', 'Austria'), ('SE', 'Suecia'), ('DK', 'Dinamarca'), ('NO', 'Noruega'), ('FI', 'Finlandia'), ('IN', 'India'), ('US', 'Estados Unidos'), ('CA', 'Canadá'), ('OTHER', 'Otro')], default='OTHER', max_length=10)),
                ('language', models.CharField(choices=[('CAT', 'Català'), ('ES', 'Español'), ('FR', 'Français'), ('EN', 'English'), ('NL', 'Nederlands'), ('DE', 'Deutsch')], default='EN', max_length=10)),
                ('birthday', models.DateField(blank=True, null=True)),
                ('certification_level', models.CharField(choices=[('NONE', 'Ninguno'), ('BEGINNER', 'Scuba'), ('OPEN_WATER', 'Open Water'), ('ADVANCED_OPEN_WATER', 'Advanced'), ('RESCUE_DIVER', 'Rescue.'), ('DIVEMASTER', 'Divemaster'), ('INSTRUCTOR', 'Istructor')], default='Ninguna', max_length=50)),
                ('emergency_contact', models.CharField(blank=True, max_length=100)),
                ('medical_conditions', models.TextField(blank=True)),
                ('weight', models.FloatField(blank=True, help_text='Peso en kg', null=True)),
                ('height', models.FloatField(blank=True, help_text='Alturan en cm', null=True)),
                ('foot_size', models.FloatField(blank=True, help_text='Talla de pie (EU)', null=True)),
                ('default_tank_size', models.CharField(choices=[('10L', '10 Litros'), ('12L', '12 Litros'), ('15L', '15 Litros'), ('18L', '18 Litros')], default='12L', help_text='Botella por defecto del cliente', max_length=10)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='customer_profiles/')),
                ('diving_licence', models.FileField(blank=True, null=True, upload_to='customer_documents/licences/')),
                ('diving_insurance', models.FileField(blank=True, null=True, upload_to='customer_documents/insurance/')),
                ('medical_check', models.FileField(blank=True, null=True, upload_to='customer_documents/medical/')),
                ('signature', models.ImageField(blank=True, null=True, upload_to='customer_signatures/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('medical_questionnaire_answers', models.JSONField(blank=True, default=dict, help_text='Guarda las respuestas del cuestionario médico')),
                ('swimming_ability', models.CharField(blank=True, choices=[('excellent', 'Excelente'), ('good', 'Bueno'), ('fair', 'Suficiente'), ('poor', 'Insuficiente')], max_length=20)),
                ('diving_center', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customers', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CourseEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('ENROLLED', 'Inscrito'), ('IN_PROGRESS', 'En progrso'), ('COMPLETED', 'Completado'), ('CANCELLED', 'Cancelado'), ('ON_HOLD', 'En espera')], default='ENROLLED', max_length=20)),
                ('enrollment_date', models.DateField(auto_now_add=True)),
                ('start_date', models.DateField(blank=True, help_text='Fecha de la primera sesión', null=True)),
                ('completion_date', models.DateField(blank=True, null=True)),
                ('certificate_number', models.CharField(blank=True, max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('price_paid', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('is_paid', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='users.course')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_enrollments', to='users.customer')),
            ],
            options={
                'ordering': ['-enrollment_date'],
            },
        ),
        migrations.CreateModel(
            name='DiveActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('duration_minutes', models.IntegerField(default=60)),
                ('price', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('diving_center', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dive_activities', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DivingGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('country', models.CharField(choices=[('ES', 'España'), ('FR', 'Francia'), ('PT', 'Portugal'), ('IT', 'Italia'), ('GB', 'Reino Unido'), ('BE', 'Bélgica'), ('NL', 'Países Bajos'), ('CH', 'Suiza'), ('DE', 'Alemania'), ('AT', 'Austria'), ('SE', 'Suecia'), ('DK', 'Dinamarca'), ('NO', 'Noruega'), ('FI', 'Finlandia'), ('IN', 'India'), ('US', 'Estados Unidos'), ('CA', 'Canadá'), ('OTHER', 'Otro')], default='OTHER', max_length=10)),
                ('contact_person', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=20)),
                ('description', models.TextField(blank=True)),
                ('arrival_date', models.DateField(blank=True, null=True)),
                ('departure_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('diving_center', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diving_groups', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DivingSite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('location', models.CharField(max_length=200)),
                ('depth_min', models.FloatField(help_text='Profundidad mínima en metros')),
                ('depth_max', models.FloatField(help_text='Profundidad máxima en metros')),
                ('difficulty_level', models.CharField(choices=[('BEGINNER', 'Principiente'), ('INTERMEDIATE', 'Intermedio'), ('ADVANCED', 'Avanzado'), ('EXPERT', 'Experto')], default='BEGINNER', max_length=20)),
                ('description', models.TextField(blank=True)),
                ('special_requirements', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('diving_center', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diving_sites', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DiveSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('max_participants', models.IntegerField(default=46)),
                ('description', models.TextField(blank=True)),
                ('special_notes', models.TextField(blank=True, help_text='Requerimientos especiales o notas adicionales para esta inmersión')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('diving_center', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dive_schedules', to=settings.AUTH_USER_MODEL)),
                ('dive_site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheduled_dives', to='users.divingsite')),
            ],
        ),
        migrations.CreateModel(
            name='InventoryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('category', models.CharField(choices=[('WETSUIT', 'Traje'), ('BCD', 'Jacket'), ('REGULATOR', 'Regulador'), ('FINS', 'Aletas'), ('MASK', 'Máscara'), ('BOOTS', 'Escarpines'), ('TANK', 'Botella'), ('WEIGHT', 'Plomos'), ('OTHER', 'Otros')], max_length=20)),
                ('size', models.CharField(choices=[('XS', 'Extra pequeño'), ('S', 'Pequeño'), ('M', 'Medio'), ('L', 'Largo'), ('XL', 'Extra Largo'), ('XXL', 'Extra Extra Largo'), ('N/A', 'No Aplicable')], default='N/A', max_length=10)),
                ('quantity_total', models.IntegerField(default=1)),
                ('quantity_available', models.IntegerField(default=1)),
                ('condition', models.CharField(choices=[('EXCELLENT', 'Excellente'), ('GOOD', 'Bueno'), ('FAIR', 'Justo'), ('POOR', 'Malo'), ('OUT_OF_SERVICE', 'Fuera de servicio')], default='GOOD', max_length=20)),
                ('purchase_date', models.DateField(blank=True, null=True)),
                ('last_maintenance', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('diving_center', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_items', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254)),
                ('phone_number', models.CharField(max_length=20)),
                ('certification_level', models.CharField(choices=[('DIVEMASTER', 'Divemaster'), ('INSTRUCTOR', 'Instructor'), ('SENIOR_INSTRUCTOR', 'Senior Instructor'), ('MASTER_INSTRUCTOR', 'Master Instructor'), ('COURSE_DIRECTOR', 'Course Director'), ('SKIPPER', 'Marinero'), ('DRIVER', 'Patrón'), ('DRIVER', 'Oficinista')], default='DIVEMASTER', max_length=50)),
                ('certification_number', models.CharField(blank=True, max_length=100)),
                ('languages', models.CharField(help_text='Idiomas que habla (separados por comas)', max_length=200)),
                ('experience_years', models.IntegerField(default=0, help_text='Años de experiencia')),
                ('specialties', models.TextField(blank=True, help_text='Especialidades o habilidades adicionales')),
                ('hire_date', models.DateField()),
                ('status', models.CharField(choices=[('ACTIVE', 'Activo'), ('INACTIVE', 'Inactivo'), ('ON_LEAVE', 'Ausente')], default='ACTIVE', max_length=20)),
                ('hourly_rate', models.DecimalField(decimal_places=2, default=0.0, help_text='Tarifa por hora', max_digits=8)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='staff_profiles/')),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('diving_center', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='staff_members', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CourseSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_number', models.IntegerField(help_text='Número de lección en el curso (1, 2, 3, etc.)')),
                ('session_type', models.CharField(choices=[('THEORY', 'Sesión teórica'), ('POOL', 'Aguas Confinadas'), ('OPEN_WATER', 'Aguas Abiertas'), ('EXAM', 'Examen'), ('PRACTICAL', 'Habilidades')], default='OPEN_WATER', max_length=20)),
                ('title', models.CharField(help_text="Título de la lección (p. ej. 'Habilidades en piscina', 'Inmersión de navegación')", max_length=100)),
                ('description', models.TextField(blank=True)),
                ('skills_covered', models.TextField(blank=True, help_text='Habilidades que se practicarán en esta lección')),
                ('status', models.CharField(choices=[('NOT_SCHEDULED', 'Sin pogramar'), ('SCHEDULED', 'Programado'), ('IN_PROGRESS', 'En progrso'), ('COMPLETED', 'Completado'), ('CANCELLED', 'Cancelado'), ('RESCHEDULED', 'Reprogramado')], default='NOT_SCHEDULED', max_length=20)),
                ('scheduled_date', models.DateField(blank=True, null=True)),
                ('scheduled_time', models.TimeField(blank=True, null=True)),
                ('completion_date', models.DateTimeField(blank=True, null=True)),
                ('grade', models.CharField(blank=True, help_text='Nota o resultado (aprobado/suspenso)', max_length=10)),
                ('instructor_notes', models.TextField(blank=True)),
                ('student_feedback', models.TextField(blank=True, help_text='Comentarios del estudiante sobre esta lección')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('enrollment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='course_sessions', to='users.courseenrollment')),
                ('template_course', models.ForeignKey(blank=True, help_text='Curso al que pertenece esta sesión plantilla', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='template_sessions', to='users.course')),
                ('dive_schedule', models.ForeignKey(blank=True, help_text='Franja de inmersión en la que está programada esta lección', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='course_sessions', to='users.diveschedule')),
                ('assistant_instructors', models.ManyToManyField(blank=True, help_text='Miembros del personal que ayudan en esta lección', related_name='assisting_sessions', to='users.staff')),
                ('instructor', models.ForeignKey(blank=True, help_text='Instructor principal de esta lección específica', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='course_sessions', to='users.staff')),
            ],
            options={
                'ordering': ['enrollment', 'session_number'],
                'unique_together': {('enrollment', 'session_number')},
            },
        ),
        migrations.AddField(
            model_name='courseenrollment',
            name='primary_instructor',
            field=models.ForeignKey(blank=True, help_text='Instructor principal para este curso', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_course_enrollments', to='users.staff'),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('location', models.CharField(blank=True, max_length=30)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('avatar', models.URLField(blank=True)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('is_diving_center', models.BooleanField(default=False)),
                ('business_name', models.CharField(blank=True, max_length=100)),
                ('business_license', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DivingGroupMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_leader', models.BooleanField(default=False)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_memberships', to='users.customer')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='users.divinggroup')),
            ],
            options={
                'unique_together': {('group', 'customer')},
            },
        ),
        migrations.CreateModel(
            name='CustomerDiveActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tank_size', models.CharField(choices=[('10L', '10L'), ('12L', '12L'), ('15L', '15L'), ('EAN12L', 'NITROX 12L'), ('EAN15L', 'NITROX 15L')], default='12L', max_length=10)),
                ('needs_wetsuit', models.BooleanField(default=False)),
                ('needs_bcd', models.BooleanField(default=False)),
                ('needs_regulator', models.BooleanField(default=False)),
                ('needs_guide', models.BooleanField(default=False)),
                ('needs_fins', models.BooleanField(default=False)),
                ('needs_insurance', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('PENDING', 'Pendiente de llegar'), ('ON_BOARD', 'A bordo'), ('BACK_ON_BOAT', 'Back on Boat'), ('DEPARTED', 'En curso'), ('FINISHED', 'Finalizado')], default='PENDING', max_length=20)),
                ('has_arrived', models.BooleanField(default=False)),
                ('is_paid', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(help_text='Curso/ Actividad que el cliente está realizando', on_delete=django.db.models.deletion.CASCADE, related_name='customer_bookings', to='users.course')),
                ('course_session', models.ForeignKey(blank=True, help_text='Sesión del curso que está realizando el cliente', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dive_activities', to='users.coursesession')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dive_activities', to='users.customer')),
                ('activity', models.ForeignKey(blank=True, help_text='DEPRECATED: Use course field instead', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='customer_bookings', to='users.diveactivity')),
                ('dive_schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customer_activities', to='users.diveschedule')),
                ('assigned_staff', models.ForeignKey(blank=True, help_text='Instructor/guía asignado', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_activities', to='users.staff')),
            ],
            options={
                'unique_together': {('customer', 'dive_schedule')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='courseenrollment',
            unique_together={('customer', 'course')},
        ),
    ]
